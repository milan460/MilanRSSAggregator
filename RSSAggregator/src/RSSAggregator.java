import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 * 
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     * 
     * <html>
     * <head>
     * <title>the channel tag title as the page title</title>
     * </head>
     * <body>
     *  <h1>the page title inside a link to the <channel> link</h1>
     *  <p>the channel description</p>
     *  <table border="1">
     *   <tr>
     *    <th>Date</th>
     *    <th>Source</th>
     *    <th>News</th>
     *   </tr>
     * 
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";
        
        /*outputHeader will print out the title, header, paragraph and the table with sections Date, Source, News
        before processing the items*/
        out.println("<html>");
        out.println("<head>");
        //get title
        XMLTree t = channel.child(getChildElement(channel, "title"));
        String h = t.child(0).label();
        out.print("<title>" + h + "</title>");
        out.println("</head>");
        //Start the body tag with header and a link reference with description
        out.println("<body>");
        XMLTree l = channel.child(getChildElement(channel, "link"));
        String hl = l.child(0).label();
        out.println("<h1><a href = " + hl + ">" + h + "</a></h1>");
        XMLTree description = channel.child(getChildElement(channel, "description"));
        out.print("<p>" + description + "</p>");
        //creating table with sections
        out.println("<table border=\"1\">");
        out.print("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file.  These are the
     * expected elements generated by this method:
     * 
     *  </table>
     * </body>
     * </html>
     * 
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";
        
        //Ending the whole Html file with necessary closing tags
        out.println("</table>");
		out.println("</body>");
		out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     * 
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";
        
        int k = 0, j = 0;
        String name = xml.child(k).label();

        // Finds the child element
        while (!name.equals(tag) && k < xml.numberOfChildren()) {
            name = xml.child(k).label();
            if (name.equals(tag)) {
                j = k;
            }
            k++;
        }

        // Returns child element or -1
        if (!name.equals(tag)) {
            return -1;
        } else {
            return j;
        }
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     * 
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires
     * [the label of the root of item is an <item> tag] and out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";
        
        //Starts another table section
        out.println("<tr>");

        //Gets the date and puts it under the date section
        if (getChildElement(item, "pubDate") == -1) {
            out.println("<td>No date available</td>");
        } else {
            String pdc = item.child(getChildElement(item, "pubDate")).child(0).label();
            out.println("<td>" + pdc + "</td>");
        }

        //Gets the source and puts it under the source section with reference link
        if (getChildElement(item, "source") == -1) {
            out.println("<td>No source available</td>");
        } else {
            String url = item.child(getChildElement(item, "source")).attributeValue("url");
            String sc = item.child(getChildElement(item, "source")).child(0).label();
            out.println("<td><a href = " + url + ">" + sc
                    + "</a></td>");
        }

        //Gets the Description and puts it under the news section with reference link
        if (getChildElement(item, "title") == -1) {
            String dc = item.child(getChildElement(item, "description")).child(0).label();
            
            if (getChildElement(item, "link") == -1) {
                out.println("<td>" + dc + "</td>");
            } else {
                String url = item.child(getChildElement(item, "link")).child(0).label();
                out.println("<td><a href = " + url + ">" + dc
                        + "</a></td>");
            }
        } else {
            String tc = item.child(getChildElement(item, "title")).child(0).label();
            
            if (getChildElement(item, "link") == -1) {
                out.println("<td>" + tc + "</td>");
            } else {
                String url = item.child(getChildElement(item, "link")).child(0).label();
                out.println("<td><a href = " + url + ">" + tc
                        + "</a></td>");
            }
        }
        out.println("</tr>");
    }
    
    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     * 
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
    */
    private static void processFeed(String url, String file, SimpleWriter out) {
    	XMLTree yourTree = new XMLTree1(url);
    	SimpleWriter out3 = new SimpleWriter1L(file);

    	if (((yourTree.label()).equals("rss"))&& ((yourTree.attributeValue("version")).equals("2.0"))) {
	    	int positionChannel = getChildElement(yourTree, "channel");
	
	    	outputHeader(yourTree.child(positionChannel), out3);
	
	    	//Fill table by using the processItem method
	    	for (int i = 0; i < yourTree.child(positionChannel).numberOfChildren(); i++) {
	    		if (yourTree.child(positionChannel).child(i).isTag()) {
	    			if ((yourTree.child(positionChannel).child(i).label()).equals("item")) {
	    				processItem(yourTree.child(positionChannel).child(i),out3);
	    				}
	    			}
	    		}
	
	    	//Ends the html file by adding necessary closing tags
	    	outputFooter(out3);
    	} else 
    		out.print("Invalid RSS Document");
    }


    /**
     * Main method.
     * 
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();
        
        out.println("Enter the name of Input File: ");
        XMLTree input = new XMLTree1(in.nextLine());
        
        out.println("Enter the name of Output File: ");
        String file = in.nextLine();
        
        SimpleWriter rssWriter = new SimpleWriter1L(file);
        
        //Opening tags for the main output file
        rssWriter.println("<html>");
        rssWriter.println("<head>");
        rssWriter.println("<title>");
        
        //Title
        if(((input.label()).equals("feeds")))
        	rssWriter.println(input.attributeValue("title"));
        
        rssWriter.println("</title>");
        rssWriter.println("</head>");
        rssWriter.println("<body>");
        rssWriter.println("<h2>");
        
        //Header
        if (((input.label()).equals("feeds")))
        	rssWriter.println(input.attributeValue("title"));
        
        rssWriter.println("</h2>");
        rssWriter.println("<ul>");
        
        for (int i = 0; i < input.numberOfChildren(); i++) {
        //Adding the name of the child to the bullet list
        	rssWriter.print("<li>");
        	rssWriter.print("<a " + "href=\""+ input.child(i).attributeValue("file") + "\">" + input.child(i).attributeValue("name") + "</a>");
        	rssWriter.println("</li>");
        	
        	String url = input.child(i).attributeValue("url");
        	String fileIn = input.child(i).attributeValue("file");
        	processFeed(url, fileIn, out);
        }
        
        rssWriter.println("</ul>");
        rssWriter.println("</body>");
        rssWriter.println("</html>");
        //Ending tags for the main output file
        
        rssWriter.close();
        out.println("Done");
        //To let the user know the file has been created
        in.close();
        out.close();
    }
}
